package com.example.ffbclient.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ffbclient.model.VoiceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VOICE_BEAN".
*/
public class VoiceBeanDao extends AbstractDao<VoiceBean, Long> {

    public static final String TABLENAME = "VOICE_BEAN";

    /**
     * Properties of entity VoiceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "type");
        public final static Property VoiceType = new Property(2, String.class, "voiceType", false, "voiceType");
        public final static Property SaveTime = new Property(3, long.class, "saveTime", false, "saveTime");
        public final static Property VoiceQuestion = new Property(4, String.class, "voiceQuestion", false, "voiceQuestion");
        public final static Property VoiceAnswer = new Property(5, String.class, "voiceAnswer", false, "voiceAnswer");
        public final static Property ImgUrl = new Property(6, String.class, "imgUrl", false, "imgUrl");
        public final static Property Action = new Property(7, String.class, "action", false, "action");
        public final static Property Expression = new Property(8, String.class, "expression", false, "expression");
        public final static Property ActionData = new Property(9, String.class, "actionData", false, "actionData");
        public final static Property ExpressionData = new Property(10, String.class, "expressionData", false, "expressionData");
    }


    public VoiceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VoiceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VOICE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"type\" INTEGER NOT NULL ," + // 1: type
                "\"voiceType\" TEXT," + // 2: voiceType
                "\"saveTime\" INTEGER NOT NULL ," + // 3: saveTime
                "\"voiceQuestion\" TEXT," + // 4: voiceQuestion
                "\"voiceAnswer\" TEXT," + // 5: voiceAnswer
                "\"imgUrl\" TEXT," + // 6: imgUrl
                "\"action\" TEXT," + // 7: action
                "\"expression\" TEXT," + // 8: expression
                "\"actionData\" TEXT," + // 9: actionData
                "\"expressionData\" TEXT);"); // 10: expressionData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VOICE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VoiceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String voiceType = entity.getVoiceType();
        if (voiceType != null) {
            stmt.bindString(3, voiceType);
        }
        stmt.bindLong(4, entity.getSaveTime());
 
        String voiceQuestion = entity.getVoiceQuestion();
        if (voiceQuestion != null) {
            stmt.bindString(5, voiceQuestion);
        }
 
        String voiceAnswer = entity.getVoiceAnswer();
        if (voiceAnswer != null) {
            stmt.bindString(6, voiceAnswer);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(8, action);
        }
 
        String expression = entity.getExpression();
        if (expression != null) {
            stmt.bindString(9, expression);
        }
 
        String actionData = entity.getActionData();
        if (actionData != null) {
            stmt.bindString(10, actionData);
        }
 
        String expressionData = entity.getExpressionData();
        if (expressionData != null) {
            stmt.bindString(11, expressionData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VoiceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String voiceType = entity.getVoiceType();
        if (voiceType != null) {
            stmt.bindString(3, voiceType);
        }
        stmt.bindLong(4, entity.getSaveTime());
 
        String voiceQuestion = entity.getVoiceQuestion();
        if (voiceQuestion != null) {
            stmt.bindString(5, voiceQuestion);
        }
 
        String voiceAnswer = entity.getVoiceAnswer();
        if (voiceAnswer != null) {
            stmt.bindString(6, voiceAnswer);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(8, action);
        }
 
        String expression = entity.getExpression();
        if (expression != null) {
            stmt.bindString(9, expression);
        }
 
        String actionData = entity.getActionData();
        if (actionData != null) {
            stmt.bindString(10, actionData);
        }
 
        String expressionData = entity.getExpressionData();
        if (expressionData != null) {
            stmt.bindString(11, expressionData);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VoiceBean readEntity(Cursor cursor, int offset) {
        VoiceBean entity = new VoiceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // voiceType
            cursor.getLong(offset + 3), // saveTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // voiceQuestion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // voiceAnswer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imgUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // action
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // expression
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // actionData
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // expressionData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VoiceBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setVoiceType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSaveTime(cursor.getLong(offset + 3));
        entity.setVoiceQuestion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVoiceAnswer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpression(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setActionData(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExpressionData(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VoiceBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VoiceBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VoiceBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
